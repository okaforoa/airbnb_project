{"version":3,"file":"static/chunks/6553.ba4817108f1664f2.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx","webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetCheckTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAlertNotifications.oss.tsx","webpack://_N_E/../ui-core/src/runs/RunPoolsDialog.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx"],"sourcesContent":["import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\nimport {FeatureFlag} from 'shared/app/FeatureFlags.oss';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {featureEnabled} from '../app/Flags';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = featureEnabled(FeatureFlag.flagSelectionSyntax)\n        ? selection.keys.map((k) => `name:\"${k}\"+`).join(' or ')\n        : selectionForPythonFiltering;\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [full, same, selected, fromSelected, fromFailure];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n","import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo, useLayoutEffect, useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {FeatureFlag} from 'shared/app/FeatureFlags.oss';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {runsPathWithFilters} from './RunsFilterInput';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {featureEnabled} from '../app/Flags';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded dependency={logsDependency} logs={logs} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({\n  dependency,\n  logs,\n}: {\n  dependency: ReturnType<typeof useTraceDependency>;\n  logs: LogsProviderLogs;\n}) => {\n  useLayoutEffect(() => {\n    if (!logs.loading) {\n      dependency.completeDependency(CompletionType.SUCCESS);\n    }\n  }, [dependency, logs]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const newRunSelectionSyntax = featureEnabled(FeatureFlag.flagSelectionSyntax);\n\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterRunSelectionByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const selection = useMemo(\n    () => ({\n      query: selectionQuery,\n      keys: selectionStepKeys,\n    }),\n    [selectionStepKeys, selectionQuery],\n  );\n\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = useMemo(\n    () =>\n      runtimeGraph\n        ? logsFilter.logQuery\n            .filter((v) => v.token && v.token === 'query')\n            .reduce((accum, v) => {\n              accum.push(\n                ...filterRunSelectionByQuery(runtimeGraph, v.value).all.map((n) => n.name),\n              );\n              return accum;\n            }, [] as string[])\n        : [],\n    [logsFilter.logQuery, runtimeGraph],\n  );\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[] = [];\n    const filterForExactStep = `\"${stepKey}\"`;\n    let nextSelectionQuery = selectionQuery;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = removeStepFromSelection(nextSelectionQuery, stepKey);\n        } else {\n          newSelected.splice(index, 1);\n        }\n      } else {\n        // select the step otherwise\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = addStepToSelection(nextSelectionQuery, stepKey);\n        } else {\n          newSelected.push(filterForExactStep);\n        }\n      }\n    } else {\n      // deselect the step if already selected\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = '';\n        } else {\n          newSelected = [];\n        }\n      } else {\n        // select the step otherwise\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = `name:\"${stepKey}\"`;\n        } else {\n          newSelected = [filterForExactStep];\n        }\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        if (matchingLogKey) {\n          setComputeLogFileKey(matchingLogKey);\n        }\n      }\n    }\n\n    if (newRunSelectionSyntax) {\n      onSetSelectionQuery(nextSelectionQuery);\n    } else {\n      onSetSelectionQuery(newSelected.join(', ') || '*');\n    }\n  };\n\n  const [expandedPanel, setExpandedPanel] = useState<null | 'top' | 'bottom'>(null);\n  const containerRef = useRef<SplitPanelContainerHandle>(null);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={selection}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={selection}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  const logContent = () => {\n    if (run?.status === 'QUEUED') {\n      return (\n        <NonIdealState\n          icon=\"arrow_forward\"\n          title=\"Run queued\"\n          description=\"This run is queued for execution and will start soon.\"\n          action={\n            <Link to={runsPathWithFilters([{token: 'status', value: 'QUEUED'}])}>\n              View queued runs\n            </Link>\n          }\n        />\n      );\n    }\n    if (logType === LogType.structured) {\n      return (\n        <LogsScrollingTable\n          logs={logs}\n          filter={logsFilter}\n          filterStepKeys={logsFilterStepKeys}\n          filterKey={`${JSON.stringify(logsFilter)}`}\n          metadata={metadata}\n        />\n      );\n    }\n    if (computeLogFileKey) {\n      return (\n        <CapturedOrExternalLogPanel\n          logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n          logCaptureInfo={logCaptureInfo}\n          visibleIOType={LogType[logType]}\n          onSetDownloadUrl={setComputeLogUrl}\n        />\n      );\n    }\n    return <NoStepSelectionState type={logType} />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logContent()}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n\nfunction removeStepFromSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) and not name:\"${stepKey}\"`;\n}\n\nfunction addStepToSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) or name:\"${stepKey}\"`;\n}\n","import {AssetCheckTagCollection} from './AssetTagCollections';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetChecksQuery, RunAssetChecksQueryVariables} from './types/RunAssetCheckTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetCheckTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetChecksQuery, RunAssetChecksQueryVariables>(\n    RUN_ASSETS_CHECKS_QUERY,\n    {\n      variables: {runId: run.id},\n      skip,\n    },\n  );\n  const {data, loading} = queryResult;\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  const assetChecks = skip ? run.assetCheckSelection : data.pipelineRunOrError.assetChecks;\n\n  return <AssetCheckTagCollection assetChecks={assetChecks} />;\n};\n\nconst RUN_ASSETS_CHECKS_QUERY = gql`\n  query RunAssetChecksQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assetChecks {\n          name\n          assetKey {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMemo} from 'react';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {assetKeysForRun} from './RunUtils';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const assetKeys = useMemo(() => {\n    const {data} = queryResult;\n    let keys = null;\n    if (data?.pipelineRunOrError.__typename === 'Run') {\n      keys = data.pipelineRunOrError.assets.map((a) => a.key);\n    }\n\n    return skip ? assetKeysForRun(run) : keys;\n  }, [queryResult, run, skip]);\n\n  return <AssetKeyTagCollection useTags assetKeys={assetKeys} />;\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","export const RunAlertNotifications = (_props: {runId: string}) => null;\n","import {Box, Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\n\nimport {PoolTag} from '../instance/PoolTag';\n\nexport const RunPoolsDialog = ({\n  isOpen,\n  onClose,\n  pools,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  pools: string[];\n}) => {\n  return (\n    <Dialog isOpen={isOpen} onClose={onClose} canOutsideClickClose canEscapeKeyClose title=\"Pools\">\n      <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12}}>\n        {pools.map((pool) => (\n          <PoolTag key={pool} pool={pool} />\n        ))}\n      </Box>\n      <DialogFooter topBorder>\n        <Button onClick={onClose} intent=\"primary\">\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {RunAlertNotifications} from 'shared/runs/RunAlertNotifications.oss';\nimport {RunMetricsDialog} from 'shared/runs/RunMetricsDialog.oss';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {QueuedRunCriteriaDialog} from './QueuedRunCriteriaDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {RunPoolsDialog} from './RunPoolsDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {useMutation} from '../apollo-client';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {RunStatus} from '../graphql/types';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrencyKeyInfo';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrencyKeyInfo.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog =\n  | 'config'\n  | 'delete'\n  | 'terminate'\n  | 'queue-criteria'\n  | 'free_slots'\n  | 'metrics'\n  | 'pools'\n  | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const runMetricsEnabled = run.hasRunMetricsEnabled;\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        <RunAlertNotifications runId={run.id} />\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        {run.allPools && run.allPools.length ? (\n          <Tooltip content=\"View pools\" position=\"top\" targetTagName=\"div\">\n            <Button icon={<Icon name=\"concurrency\" />} onClick={() => setVisibleDialog('pools')} />\n          </Tooltip>\n        ) : null}\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon=\"download_for_offline\"\n                  // eslint-disable-next-line no-restricted-properties\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {run.status === RunStatus.QUEUED ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"history_toggle_off\"\n                  text=\"View queue criteria\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('queue-criteria')}\n                />\n              ) : null}\n              {runMetricsEnabled && RunMetricsDialog ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"asset_plot\"\n                  text=\"View container metrics\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('metrics')}\n                />\n              ) : null}\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon=\"lock\"\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.status === RunStatus.QUEUED ? (\n        <QueuedRunCriteriaDialog\n          run={run}\n          isOpen={visibleDialog === 'queue-criteria'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.allPools && run.allPools.length ? (\n        <RunPoolsDialog\n          isOpen={visibleDialog === 'pools'}\n          pools={run.allPools}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {Box, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TagActionsPopover} from '../ui/TagActions';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [showLogs, setShowLogs] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name, repositoryName, repositoryLocationName} = instigationSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  const actions = [\n    {\n      label: `View ${instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensor'}`,\n      to: workspacePathFromAddress(\n        repoAddress,\n        `${instigationType === DagsterTag.ScheduleName ? '/schedules' : '/sensors'}/${name}`,\n      ),\n    },\n    {\n      label: 'View tick details',\n      onClick: () => setShowDetails(true),\n    },\n    {\n      label: 'View tick logs',\n      onClick: () => setShowLogs(true),\n    },\n  ];\n\n  return (\n    <>\n      <TagActionsPopover actions={actions} data={{key: 'Launched by', value: name}}>\n        <Tag icon={icon}>\n          <Box flex={{direction: 'row'}}>\n            <span>Launched by&nbsp;</span>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </Box>\n        </Tag>\n      </TagActionsPopover>\n      <TickDetailsDialog\n        isOpen={showDetails}\n        tickResultType=\"runs\"\n        onClose={() => setShowDetails(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n      <TickLogDialog\n        isOpen={showLogs}\n        onClose={() => setShowLogs(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n    </>\n  );\n};\n","import {Box, ButtonLink, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {EvaluationDetailDialog} from './AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ntype OpenEvaluation = {\n  assetKeyPath: string[];\n  evaluationId: string;\n};\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const [openEvaluation, setOpenEvaluation] = useState<OpenEvaluation | null>(null);\n\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <>\n      <Popover\n        placement=\"bottom\"\n        content={\n          <div style={{width: '400px'}}>\n            <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n              Automation condition\n            </Box>\n            <Box\n              flex={{direction: 'column', gap: 16}}\n              padding={{vertical: 12}}\n              style={{maxHeight: '220px', overflowY: 'auto'}}\n            >\n              {sortedKeys.map((assetKey) => {\n                const url = assetDetailsPathForKey(assetKey, {\n                  view: 'automation',\n                  evaluation: evaluationId,\n                });\n                return (\n                  <Box\n                    key={url}\n                    padding={{vertical: 8, left: 12, right: 16}}\n                    flex={{\n                      direction: 'row',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      gap: 16,\n                    }}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{overflow: 'hidden'}}\n                    >\n                      <Icon name=\"asset\" />\n                      <MiddleTruncate text={assetKey.path.join('/')} />\n                    </Box>\n                    <ButtonLink\n                      onClick={() => setOpenEvaluation({assetKeyPath: assetKey.path, evaluationId})}\n                      style={{whiteSpace: 'nowrap'}}\n                    >\n                      View evaluation\n                    </ButtonLink>\n                  </Box>\n                );\n              })}\n            </Box>\n          </div>\n        }\n        interactionKind=\"hover\"\n      >\n        <Tag icon=\"automation_condition\">Automation condition</Tag>\n      </Popover>\n      <EvaluationDetailDialog\n        assetKeyPath={openEvaluation?.assetKeyPath ?? []}\n        isOpen={!!openEvaluation}\n        onClose={() => setOpenEvaluation(null)}\n        evaluationID={openEvaluation?.evaluationId ?? ''}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {Run} from './Run';\nimport {RunAssetCheckTags} from './RunAssetCheckTags';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag, RunTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {getBackfillPath} from './RunsFeedUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunPageFragment} from './types/RunFragments.types';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  const partitionTag = run?.tags.find((tag) => tag.key === DagsterTag.Partition);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={<RunHeaderTitle run={run} runId={runId} />}\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {partitionTag && <RunTag tag={partitionTag} />}\n                <RunAssetTags run={run} />\n                <RunAssetCheckTags run={run} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string}) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n\nconst RunHeaderTitle = ({run, runId}: {run: RunPageFragment | null; runId: string}) => {\n  const backfillTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.Backfill),\n    [run],\n  );\n\n  if (backfillTag) {\n    return (\n      <Heading>\n        <Link to=\"/runs\" style={{color: Colors.textLight()}}>\n          Runs\n        </Link>\n        {' / '}\n        <Link\n          to={getBackfillPath(backfillTag.value, !!run?.assetSelection?.length)}\n          style={{color: Colors.textLight()}}\n        >\n          {backfillTag.value}\n        </Link>\n        {' / '}\n        {runId.slice(0, 8)}\n      </Heading>\n    );\n  }\n\n  return (\n    <Heading style={{display: 'flex', flexDirection: 'row', gap: 6}}>\n      <Link to=\"/runs\">Runs</Link>\n      <span>/</span>\n      <span style={{fontFamily: FontFamily.monospace}}>{runId.slice(0, 8)}</span>\n    </Heading>\n  );\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n"],"names":["CancelRunButton","run","param","id","runId","canTerminate","showDialog","setShowDialog","useState","closeDialog","useCallback","onComplete","result","errors","error","showSharedToaster","message","icon","intent","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","Button","Icon","name","disabled","onClick","TerminationDialog","isOpen","onClose","selectedRuns","stepSelectionWithState","selection","metadata","stepStates","keys","map","key","steps","state","IStepState","PREPARING","present","length","failed","includes","FAILED","finished","every","SUCCEEDED","stepState","canRunAllSteps","doneStatuses","has","status","canRunFromFailure","executionPlan","failedStatuses","RunActionButtons","graph","props","repoMatch","useRepositoryForRunWithParentSnapshot","jobError","useJobAvailabilityErrorForRun","artifactsPersisted","currentRunSelection","stepSelectionFromRunTags","tag","tags","find","t","DagsterTag","StepSelection","filterByQuery","value","all","k","query","currentRunIsFromFailure","some","IsResumeRetry","reexecute","useJobReexecution","reexecuteWithSelection","pipelineSnapshotId","executionParams","getReexecutionParamsForSelection","repositoryLocationName","match","repositoryLocation","repositoryName","repository","full","scope","title","tooltip","ReexecutionStrategy","ALL_STEPS","e","shiftKey","same","div","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","concat","join","selectionForUIFiltering","featureEnabled","FeatureFlag","flagSelectionSyntax","selectionKeys","filterRunSelectionByQuery","node","fromFailureEnabled","fromFailure","FROM_FAILURE","forEach","option","options","preferredRerun","primary","Group","direction","spacing","Box","flex","LaunchButtonDropdown","runCount","hasReExecutePermission","undefined","DEFAULT_DISABLED_REASON","launchpadElement","style","paddingLeft","span","display","step","useFavicon","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","href","runStatusFavicon","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","memo","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","onShowStateDetails","stepKey","logs","errorNode","__typename","showCustomAlert","body","jsx_runtime","PythonErrorInfo","onSetSelectionQuery","logQuery","token","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","onSetLogsFilter","useLayoutEffect","loading","completeDependency","CompletionType","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","newRunSelectionSyntax","setQueryLogType","logType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","sort","stepKeys","useMemo","parse","runtimeGraph","toGraphQueryItems","selectionStepKeys","n","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","filter","v","reduce","accum","push","expandedPanel","setExpandedPanel","containerRef","useRef","current","size","getSize","isTopExpanded","isBottomExpanded","resetPanels","changeSize","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","ErrorBoundary","region","GanttChart","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","alignItems","gap","Tooltip","content","onClickStep","evt","index","indexOf","newSelected","filterForExactStep","nextSelectionQuery","splice","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","onSetSelection","focusedTime","NonIdealState","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","description","action","Link","to","runsPathWithFilters","LogsScrollingTable","filterStepKeys","filterKey","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","NoStepSelectionState","type","styled","withConfig","grow","justifyContent","background","Colors","RunAssetCheckTags","skip","data","useQuery","RUN_ASSETS_CHECKS_QUERY","variables","pipelineRunOrError","assetChecks","assetCheckSelection","AssetCheckTagCollection","gql","RunAssetTags","queryResult","RUN_ASSETS_QUERY","fetchPolicy","assetKeys","assets","a","assetKeysForRun","AssetKeyTagCollection","useTags","RunAlertNotifications","RunPoolsDialog","pools","Dialog","canOutsideClickClose","canEscapeKeyClose","margin","horizontal","vertical","PoolTag","pool","DialogFooter","topBorder","RunHeaderActions","isJob","runMetricsEnabled","hasRunMetricsEnabled","visibleDialog","setVisibleDialog","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryOrigin","disabledReason","useDisabledButtonTooltipFix","label","AnchorButton","allPools","position","targetTagName","Popover","Menu","MenuItem","text","window","open","QUEUED","tagName","RunMetricsDialog","hasConcurrencyKeySlots","hasDeletePermission","RunConfigDialog","runConfigYaml","QueuedRunCriteriaDialog","DeletionDialog","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","hasTerminatePermission","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","showDetails","setShowDetails","showLogs","setShowLogs","ScheduleName","repoAddress","buildRepoAddress","actions","workspacePathFromAddress","TagActionsPopover","maxWidth","MiddleTruncate","TickDetailsDialog","tickResultType","TickLogDialog","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","openEvaluation","evaluationId","setOpenEvaluation","sortedKeys","b","compare","width","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","ButtonLink","assetKeyPath","whiteSpace","EvaluationDetailDialog","evaluationID","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","isThisThingAJob","automaterializeTag","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","partitionTag","Partition","flexDirection","minWidth","height","zIndex","PageHeader","RunHeaderTitle","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","RunTag","assetSelection","RunById","runs_RunRoot","RUN_PAGE_FRAGMENT","backfillTag","Backfill","Heading","color","getBackfillPath","fontFamily","FontFamily","monospace","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","QueryfulTickLogsTable","TICK_LOG_EVENTS_QUERY","notifyOnNetworkStatusChange","events","instigationStateOrError","tick","logEvents","SpinnerWithText","InstigationEventLogTable","tickStatus","instigationLoggingDocsUrl","ExternalAnchorButton","rightIcon","INSTIGATION_EVENT_LOG_FRAGMENT"],"sourceRoot":""}